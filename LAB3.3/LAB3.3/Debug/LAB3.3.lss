
LAB3.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020d  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c0  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void) {
	
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	8d 60       	ori	r24, 0x0D	; 13
  70:	83 bf       	out	0x33, r24	; 51

	DDRA = 0xFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  76:	1b ba       	out	0x1b, r1	; 27
   
    while (1) 
    {
		
		//GENEROWANIE STANU WYSOKIEGO 
		OCR0 = 146;
  78:	82 e9       	ldi	r24, 0x92	; 146
  7a:	8c bf       	out	0x3c, r24	; 60
		TIFR |= (1<<OCF0);
  7c:	88 b7       	in	r24, 0x38	; 56
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	88 bf       	out	0x38, r24	; 56
		PORTA |= (1<<PA0);
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8b bb       	out	0x1b, r24	; 27
		while(!(TIFR & (1<<OCF0)));
  88:	08 b6       	in	r0, 0x38	; 56
  8a:	01 fe       	sbrs	r0, 1
  8c:	fd cf       	rjmp	.-6      	; 0x88 <main+0x1c>
		TCNT0 = 0;
  8e:	12 be       	out	0x32, r1	; 50
		
		// GENEROWANIE STANU NISKIEGO 
		OCR0 = 48;
  90:	80 e3       	ldi	r24, 0x30	; 48
  92:	8c bf       	out	0x3c, r24	; 60
		TIFR |= (1<<OCF0);
  94:	88 b7       	in	r24, 0x38	; 56
  96:	82 60       	ori	r24, 0x02	; 2
  98:	88 bf       	out	0x38, r24	; 56
		PORTA &= ~(1<<PA0);
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	8b bb       	out	0x1b, r24	; 27
		while(!(TIFR & (1<<OCF0)));
  a0:	08 b6       	in	r0, 0x38	; 56
  a2:	01 fe       	sbrs	r0, 1
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <main+0x34>
		TCNT0 = 0;
  a6:	12 be       	out	0x32, r1	; 50
		

    }
  a8:	e7 cf       	rjmp	.-50     	; 0x78 <main+0xc>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
